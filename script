<!--Подключаем библиотеку Three.js для дальнейшей работы-->
<script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r120/three.min.js"></script>
<!--Подключаем библиотеку для обработки GLTF сцен-->
<script src="https://cdn.jsdelivr.net/gh/mrdoob/three.js@r92/examples/js/loaders/GLTFLoader.js"></script>

<!--Под тэгом script представлен код 3D сцены ThreeJS-->
<script>
// Создаем сцену, камеру и метод рендеринга
    let scene, camera, render

    var mouseX = 0, mouseY = 0;

    var windowHalfX = window.innerWidth / 2;

    var windowHalfY = window.innerHeight / 2;
// Функция ниже отрисовывает сцену в Canvas-элемент с id '3d', который мы задали в Zero Block
    function init() {

        const canvas = document.querySelector('#3d');
// Создаем сцену
        scene = new THREE.Scene()
// Задаём фоновый цвет сцене
        scene.background = new THREE.Color(0xFFCDDF)
// Создаём камеру и задаём её параметры
        camera = new THREE.PerspectiveCamera(40, window.innerWidth/window.innerHeight,1,5000)

        camera.rotation.y = 15/180*Math.PI

        camera.rotation.x = -10/180*Math.PI

        camera.position.x = -40

        camera.position.y = 150

        camera.position.z = -300
// Добавляем свет окружения, в скобках первый параметр - цвет, второй - сила
        hlight = new THREE.AmbientLight(0x404040, 2)

        scene.add(hlight)
// Добавляем прямой свет, в скобках первый параметр - цвет, второй - сила
        directionalLight = new THREE.DirectionalLight(0xffffff, 1)

        directionalLight.position.set(0,1,0)
// Добавляем тени
        directionalLight.castShadow = true

        scene.add(directionalLight)
// Добавляем точечный свет, в скобках первый параметр - цвет, второй - сила
        light = new THREE.PointLight(0xc4c4cc4, 0.5)

        light.position.set(0, 300, 500)

        scene.add(light)

        light2 = new THREE.PointLight(0xc4c4cc4, 0.5)

        light.position.set(500, 100, 0)

        scene.add(light2)

        light3 = new THREE.PointLight(0xc4c4cc4, 0.5)

        light.position.set(0, 100, -500)

        scene.add(light3)

        light4 = new THREE.PointLight(0xc4c4cc4, 0.5)

        light.position.set(-5000, 300, 0)

        scene.add(light4)
// Задаем параметры рендеринга
        renderer = new THREE.WebGLRenderer({canvas, antialias: true})

        renderer.setSize(window.innerWidth, window.innerHeight)

//Ниже запрещаем некоторые взаимодействия, не особо нам нужные

        document.addEventListener( 'mousemove', onDocumentMouseMove, false );

        document.addEventListener( 'touchstart', onDocumentTouchStart, false );

        document.addEventListener( 'touchmove', onDocumentTouchMove, false );

        window.addEventListener( 'resize', onWindowResize, false );
// Подгружаем GLTF сцену
        let loader = new THREE.GLTFLoader()
// Задаем ссылку на сцену
        loader.load('https://raw.githubusercontent.com/yanschafer/model/main/scene.gltf', function(gltf){

            car = gltf.scene.children[0]

            car.scale.set(-20, -20, 20)

            scene.add(gltf.scene)

            animate();

        })

    }

// Параметры изменения размера окна

    function onWindowResize() {

        windowHalfX = window.innerWidth / 2;

        windowHalfY = window.innerHeight / 2;

        camera.aspect = window.innerWidth / window.innerHeight;

        camera.updateProjectionMatrix();

        renderer.setSize( window.innerWidth, window.innerHeight );

    }

// Параметры поведения модели при движении мышью

    function onDocumentMouseMove( event ) {

        mouseX = event.clientX - windowHalfX;

        mouseY = event.clientY - windowHalfY;

    }

    function onDocumentTouchStart( event ) {

        if ( event.touches.length === 1 ) {

            event.preventDefault();

            mouseX = event.touches[ 0 ].pageX - windowHalfX;

            mouseY = event.touches[ 0 ].pageY - windowHalfY;

        }

    }

    function onDocumentTouchMove( event ) {

        if ( event.touches.length === 1 ) {

            event.preventDefault();

            mouseX = event.touches[ 0 ].pageX - windowHalfX;

            mouseY = event.touches[ 0 ].pageY - windowHalfY;

        }

    }
// Анимирование модели
    function animate() {

        camera.position.x += ( mouseX - camera.position.x ) * .005;

        camera.position.y += ( - mouseY - camera.position.y ) * .005;

        camera.lookAt( 0, 0, 0 );

        renderer.render(scene,camera);

        requestAnimationFrame(animate);

    }

    init()

</script>
